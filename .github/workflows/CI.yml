name: CI con gradle

on:
  push:
      branches: [ master ] #se ejecutará cuando hagamos un push a esta rama
  workflow_dispatch: #y también podremos ejecutar el workflos manualmente desde github
    
jobs:
  build:
      runs-on: ubuntu-latest #trabajaremos sobre una máqina ubuntu
      permissions:
        contents: read #el repo solo se puede leer
        packages: write #para tener acceso a los binarios resultantes de los build
        
      steps:
          ### CONFIGUGRACIÓN DEL ENTORNO: jdk 8 y dradle 2.1 ###
        - uses: actions/checkout@v2 #descarga el repositorio en el ejecutor
        - name: Set up JDK 8
          uses: actions/setup-java@v2
          with:
            java-version: '8'
            distribution: 'adopt'
            server-id: github #value of the distribuionManagmente/repository/id field of the pom.xml
            settings-path: ${{ github.workspace }} #n for the settings.xml file
        - name: set up gradle
          uses: gradle/gradle-build-action@v2
          with:
            gradle-version: 2.1
            
        ### BUILDS ###
        - name: hacer build del frontend
          working-directory: src/Clients
          run: ./gradlew build
          
        - name: hacer build del backend
          working-directory: src/Backend/OrderService
          run: ./gradlew build test
            
            
        - name: dockerizar el front y el backend
          run: |
            cp src/Clients/build/libs/*.war deploy/docker/Clients/drop #copiar el resultado del buid para la nueva imagen
            docker build -t p2cicd/web deploy/docker/Clients #p2gps o el nombre que tenga tu repo
            cp src/Backend/OrderService/build/libs/ordering* deploy/docker/Order/drop
            docker build -t p2cicd/order deploy/docker/Order
            
        ###SUBIR IMAGENES A DOCKERHUB ###
        
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME}}
            password: ${{ secrets.DOCKERHUB_PASSWORD}}
        - name: Etiquetar con formato DockerHub
          run: |
            docker tag p2cicd/web ${{ secrets.DOCKERHUB_USERNAME}}/p2cicd:web
            docker tag p2cicd/order ${{ secrets.DOCKERHUB_USERNAME}}/p2cicd:order
        - name: Push a DockerHub
          run: |
            docker push ${{ secrets.DOCKERHUB_USERNAME}}/p2cicd:order
            docker push ${{ secrets.DOCKERHUB_USERNAME}}/p2cicd:web
